//
//  Step3ViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 2/24/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftyUserDefaults

class Step3ViewController: BaseViewController, Step3CellDelegate, Step3PresenterOutput {
    
    @IBOutlet weak var titleLabel: NavbarLabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var nextButton: Button!
    
    var point: Point?
    var transfer: Step3.Transfer?
    
    var elseCount = 1
    
    var model = Step3.ViewModel()
    
    var input: Step3.Input {
        return Step3.Input(point: point, formType: CreatePointFormType.getPointFormTypeBy(projectType: (transfer?.step1.selectedType)!), categoryId: model.selectedCategoryId, subcategoriesIds: model.selectedSubcategoriesIds, consumer: model.consumer, level: model.level, siteUrl: model.siteUrl, socials: model.getSocials(), beginDate: model.selectedBeginDate?.toInt(), endDate: model.selectedEndDate?.toInt())
    }
    
    var output: Step3InteractorInput!
    var router: Step3Router!

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        Step3Configurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 100

        setupPickerView([:], done: #selector(self.pickerDoneButtonHandler(_:)))
        
        model.selectedType = transfer?.step1.selectedType
        
        if point != nil {
            titleLabel.text = "UI.editPoint".localize()
            nextButton.setTitle("UI.save".localize(), for: UIControlState())
            
            if let categories = point?.categories, !categories.isEmpty { model.selectedCategoryId = categories[0] }
            if let subcats = point?.subCategories { model.selectedSubcategoriesIds = subcats }
        }
        
        output.checkInput(input)
    }

    // MARK: - Event handling

    @IBAction func createPointButtonHandler(_ sender: AnyObject) {
        if point == nil { output.createPoint(with: input, and: transfer!) } else { output.editPoint(with: input, and: transfer!) }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAtIndexPath indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        if indexPath.section == 0 {
            var pD = [String:Int]()
            
            if indexPath.row == 0 {
                pickerTag = PickerType.category.rawValue
                
                if let ids = ProjectsProvider.instance.getProject(by: (transfer?.step1.selectedProject?.rawValue)!)?.categories {
                    CategoriesProvider.instance.getCategories(by: ids).forEach { category in  
                        if let title = category.title, let id = category.id { pD[title] = id }
                    }
                }
                
            } else {
                pickerTag = PickerType.subcategory.rawValue
                model.selectedSubcategoryIndexPath = indexPath
                
                if let ids = getSelectedCategory()?.subCategories {
                    CategoriesProvider.instance.getSubcategories(by: ids).forEach { subcategory in
                        if let title = subcategory.title, let id = subcategory.id { pD[title] = id }
                    }
                }
            }
            
            setupPickerView(pD, done: #selector(self.pickerDoneButtonHandler(_:)))
            view.endEditing(true)
            showPicker()
        }
        if indexPath.section == 1 {
            elseCount = 1
            output.checkInput(input)
        }
        if indexPath.section == 4 {
            model.socials.append(contentsOf: [Social(type: .facebook, url: String()), //Social(type: .vkontakte, url: String())
                ])
        }
        
        tableView.reloadData()
    }
    
    @objc func pickerDoneButtonHandler(_ sender: AnyObject) {
        switch pickerTag {
            case PickerType.category.rawValue:
                model.selectedCategoryId = pickerSelectedValue()
                model.selectedSubcategoriesIds = []
                elseCount = 1
                
            case PickerType.subcategory.rawValue:
                if let id = pickerSelectedValue() {
                    if model.selectedSubcategoriesIds.count > (model.selectedSubcategoryIndexPath?.row)! - 1 {
                        model.selectedSubcategoriesIds[(model.selectedSubcategoryIndexPath?.row)! - 1] = id
                    } else {
                        model.selectedSubcategoriesIds.append(id)
                    }
                    elseCount = 0
                }
                
            case PickerType.beginDate.rawValue:
                model.selectedBeginDate = pickerSelectedDate()
                
                if let endDate =  model.selectedEndDate, let beginDate = model.selectedBeginDate, endDate < beginDate {
                    model.selectedEndDate = pickerSelectedDate()
                }
                
            case PickerType.endDate.rawValue:
                model.selectedEndDate = pickerSelectedDate()
                
            default:
                break
        }
        output.checkInput(input)
        tableView.reloadData()
        hidePicker()
    }
    
    // MARK: - Display logic
    
    func toggleButton(_ isEnabled: Bool) {
        nextButton.isEnabled = isEnabled
    }
    
    func didCreatedPoint() {
        if (transfer?.step1.selectedProject == .mabius) { Defaults[.showModeration] = true } else { Defaults[.showModeration] = false }
        router.proceed()
    }
    
    func didEditedPoint() {
        router.proceed()
    }
    
    func showError(_ error: String) {
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    // MARK: - Step3CellDelegate
    
    func didPressDeleteSubcategory(_ cell: Step3Cell) {
        if !model.selectedSubcategoriesIds.isEmpty {
            let row = (tableView.indexPath(for: cell)?.row)! - 1
            if model.selectedSubcategoriesIds.count > row { model.selectedSubcategoriesIds.remove(at: row) } else { elseCount = 0 }
            
            if model.selectedSubcategoriesIds.isEmpty {
                model.selectedSubcategoriesIds = []
                elseCount = 1
            }
            
            output.checkInput(input)
            tableView.reloadData()
        }
    }
    
    func didPressDeleteSocial(_ cell: Step3Cell) {
        let indexPath = tableView.indexPath(for: cell)
        model.socials.remove(at: (indexPath?.row)! - 1)
        
        tableView.reloadData()
    }
    
    func didPressDateSelection(_ sender: UIButton) {
        if sender.tag == 0 {
            pickerTag = PickerType.beginDate.rawValue
            setDatePickerMinimumDate(with: Date())
        } else {
            pickerTag = PickerType.endDate.rawValue
            if let beginDate = model.selectedBeginDate { setDatePickerMinimumDate(with: beginDate) }
        }
        
        view.endEditing(true)
        showDatePicker()
    }
    
    func consumerTextViewDidChange(with text: String) {
        model.consumer = text
        output.checkInput(input)
    }
    
    func levelTextFieldDidChange(with text: String) {
        model.level = text
        output.checkInput(input)
    }
    
    func urlTextFieldDidChange(with text: String) {
        model.siteUrl = text
    }
    
    func socialUrlTextFieldDidChange(with text: String, in cell: Step3Cell) {
        if let row = tableView.indexPath(for: cell)?.row { model.socials[row - 1].url = text }
    }
    
    // MARK: - Categories
    
    func getSelectedCategory() -> Category? {
        return CategoriesProvider.instance.getCategories().first(where: { $0.id == model.selectedCategoryId })
    }
    
    func getSelectedSubcategory(id: Int) -> SubCategory? {
        if let ids = getSelectedCategory()?.subCategories { return CategoriesProvider.instance.getSubcategories(by: ids).first(where: { $0.id == id }) } else { return nil }
    }
}

extension Step3ViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if point != nil { return 2 }
        if transfer?.step1.selectedType == .event { return 6 }
        return 5
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
            case 0:
				return 1
//                if model.selectedCategoryId == nil { return 1 } else { return model.selectedSubcategoriesIds.count + 1 + elseCount }
            case 1, 2, 4, 5:
                return 1
            case 3:
                return model.socials.count + 1
            default:
                return 0
            }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
            case 0:
				let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "categoryCell")! as! Step3Cell
				cell.categoryLabel.text = getSelectedCategory()?.title ?? "UI.category".localize()
				cell.delegate = self
				return cell
				
//                if indexPath.row == 0 {
//
//
//                }
//				else {
//                    let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "subcategoryCell")! as! Step3Cell
					
//                    if model.selectedSubcategoriesIds.count > indexPath.row - 1 {
//                        cell.subcategoryLabel.text = getSelectedSubcategory(id: model.selectedSubcategoriesIds[indexPath.row - 1])?.title
//                    } else {
//                        cell.subcategoryLabel.text = "UI.subcategory".localize()
//                    }
//                    cell.delegate = self
//                    return cell
//                }
            case 1:
                let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "moreCell")! as! Step3Cell
                return cell
            
            case 2:
                let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "infoCell")! as! Step3Cell
                
                if transfer?.step1.selectedType == .event && cell.infoTextView != nil && cell .levelTextField != nil {
                    cell.infoTextView.removeFromSuperview()
                    cell.levelTextField.removeFromSuperview()
                }
                
                cell.delegate = self
                return cell
            
            case 3:
                if indexPath.row == 0 {
                    let cell: UITableViewCell = tableView.dequeueReusableCell(withIdentifier: "SocialUrlLabelCell")!
                    return cell
                    
                } else {
                    let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "socialCell")! as! Step3Cell
                    cell.socialIcon.layer.cornerRadius = 4
                    cell.delegate = self
                    let social = model.socials[indexPath.row - 1]
                    
                    switch social.type {
                    case .facebook:
                        cell.socialIcon.image = #imageLiteral(resourceName: "icFbActive")
                        cell.socialUrlTextField.placeholder = "Facebook"
//                    case .vkontakte:
//                        cell.socialIcon.image = #imageLiteral(resourceName: "icVkActive")
//                        cell.socialUrlTextField.placeholder = "Vkontakte"
                    }
                    
                    cell.socialUrlTextField.text = social.url
                    cell.socialUrlTextField.addTarget(cell, action: #selector(cell.socialUrlChanged(_ :)), for: .editingChanged)
                    return cell
                }
            
            case 4:
                let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "moreCell")! as! Step3Cell
                return cell
            
            default:
                let cell: Step3Cell = tableView.dequeueReusableCell(withIdentifier: "dateCell")! as! Step3Cell
                cell.delegate = self
                if model.selectedBeginDate != nil { cell.beginDateButton.setTitle(model.selectedBeginDate?.toString(), for: UIControlState()) }
                if model.selectedEndDate != nil { cell.endDateButton.setTitle(model.selectedEndDate?.toString(), for: UIControlState()) }
                return cell
        }
    }
}
