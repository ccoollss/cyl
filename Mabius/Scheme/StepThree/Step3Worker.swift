//
//  Step3Worker.swift
//  Mabius
//
//  Created by Timafei Harhun on 2/24/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

protocol Step3WorkerInput {
    func createPoint(with input: Step3.Input, and transfer: Step3.Transfer)
    func editPoint(with input: Step3.Input, and transfer: Step3.Transfer)
}

protocol Step3WorkerOutput: class {
    func didCreatedPoint()
    func didEditedPoint()
    func gotError(_ error: Error)
}

class Step3Worker: Step3WorkerInput {
    
    weak var output: Step3WorkerOutput?

    // MARK: - Business Logic
    
    func createPoint(with input: Step3.Input, and transfer: Step3.Transfer) {
        
        let body = getBody(with: input)
        
        body.project = transfer.step1.selectedProject?.rawValue
        body.type = transfer.step1.selectedType?.rawValue
        
        body.title = transfer.step2.name
        body.description = transfer.step2.description
        body.address = transfer.step2.address
        body.location = transfer.step2.location
        body.image = transfer.step2.logoId
        body.images = transfer.step2.imagesIds
        
        if let id = input.categoryId { body.categories = [id] }
        body.subCategories = input.subcategoriesIds
        body.siteUrl = input.siteUrl
        body.socialUrls = input.socials
        
        body.formType = input.formType.rawValue
        
        CreatePoint(params: body).exec { result in
            switch result {
            case .value(let response):
                PointsDataStorage.save(point: response.object)
                self.output?.didCreatedPoint()
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func editPoint(with input: Step3.Input, and transfer: Step3.Transfer) {
        
        input.point?.title = transfer.step2.name
        input.point?.description = transfer.step2.description
        input.point?.address = transfer.step2.address
        if transfer.step2.location != nil { input.point?.location = transfer.step2.location }
        input.point?.imagesId = transfer.step2.imagesIds
        input.point?.imageId = transfer.step2.logoId
        
        input.point?.categories = [input.categoryId!]
        input.point?.subCategories = input.subcategoriesIds
        
        input.point?.image = nil
        input.point?.images = nil
        
        EditPoint(pointId: input.point?.id, params: input.point).exec { result in
            switch result {
            case .value(let response):
                PointsDataStorage.save(point: response.object)
                self.output?.didEditedPoint()
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    // MARK: - Helpers
    
    fileprivate func getBody(with input: Step3.Input) -> CreatePointForm {
        switch input.formType {
            case .project:
                let body = CreateProjectPointForm()
                body.level = input.level
                body.consumer = input.consumer
                return body
            case .idea:
                let body = CreateIdeaPointForm()
                body.level = input.level
                body.consumer = input.consumer
                return body
            case.event:
                let body = CreateEventPointForm()
                body.startTime = input.beginDate
                body.finishTime = input.endDate
                return body
        }
    }
}
