//
//  Step2ViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 2/24/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class Step2ViewController: BaseViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UITextViewDelegate, Step2PresenterOutput, Step2RouterOutput {
    
    @IBOutlet weak var titleLabel: NavbarLabel!
    @IBOutlet weak var titleTextField: TextField!
    @IBOutlet weak var infoTextView: TextView!
    @IBOutlet weak var addressTextField: TextField!
    @IBOutlet weak var nextButton: Button!
    
    @IBOutlet var imageButtons: [RoundedButton]!
    @IBOutlet weak var pointLogoButton: RoundedButton!
    
    var selectedSender: UIButton?
    let imagePicker = UIImagePickerController()

    var point: Point?
    
    var model = Step2.ViewModel()
    var transfer: Step2.Transfer?
    
    var input: Step2.Input {
        return Step2.Input(name:titleTextField.text, address:addressTextField.text, description:infoTextView.text, location: model.location, logoId: model.logoId, imagesIds: model.getImagesIds())
    }
    
    var output: Step2InteractorInput!
    var router: Step2Router!

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        Step2Configurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        imagePicker.sourceType = .photoLibrary
        imagePicker.allowsEditing = true
        imagePicker.delegate = self
		
		infoTextView.placeholder = "addcontroller.description".localize()
		
        if point != nil {
            titleLabel.text = "UI.editPoint".localize()
            titleTextField.text = point?.title
            infoTextView.text = point?.description
            addressTextField.text = point?.address
            model.location = point?.location
            
            _ = point?.images?.enumerated().map{(index, url) in
                ImageFetcher.fetch(url, to: imageButtons[index].imageView!, completion: { (image, _) in
                    self.imageButtons[index].setBackgroundImage(image.value, for: .normal)
                    self.imageButtons[index].setImage(UIImage(named: "icDeletePhoto"), for: .normal)
                    self.imageButtons[index].isSelected = true
                    self.imageButtons[index].isEnabled = true
                    
                    self.model.imagesIds[(self.imageButtons[index].tag)] = self.point?.imagesId?[index]
                    
                    if let endIndex = self.point?.images?.endIndex, index < endIndex - 1 || index == 0 { self.imageButtons[index + 1].isEnabled = true }
                })
            }
            
            imageButtons.last?.isEnabled = imageButtons[1].isSelected
                
            model.logoId = point?.imageId
            ImageFetcher.fetch(point?.image, to: pointLogoButton.imageView!, completion: { (image, _) in
                self.pointLogoButton.setBackgroundImage(image.value, for: .normal)
                self.pointLogoButton.setImage(UIImage(named: "icDeletePhoto"), for: .normal)
                self.pointLogoButton.isSelected = true
            })
            
            let adressComponents = point?.address?.components(separatedBy: ", ")
            
            if adressComponents?.count == 3 {
                model.address = Step2.Address(country: adressComponents?[0], city: adressComponents?[1], address: adressComponents?[2], more: nil)
            } else if adressComponents?.count == 4 {
                model.address = Step2.Address(country: adressComponents?[0], city: adressComponents?[1], address: adressComponents?[2], more: adressComponents?[3])
            }
        } else {
            transfer = Step2.Transfer(step1: Step1.Input(selectedProject: .mabius, selectedType: .project))
        }
    
        titleTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        addressTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        infoTextView.delegate = self
        
        output.checkInput(input)
    }
    
    // MARK: - Event handling

    @objc func inputChanged(_ textField: UITextField) {
        output.checkInput(input)
    }
    
    @IBAction func nextButtonHandler(_ sender: AnyObject) {
        router.proceedNext()
    }
    
    @IBAction func selectPhotosButtonHandler(_ sender: UIButton) {
        if !sender.isSelected {
            selectedSender = sender
            router.showImagePicker()
        } else {
            sender.setBackgroundImage(nil, for: UIControlState())
            
            if sender.tag == ImageButton.logo.rawValue {
                model.logoId = nil
                sender.setImage(UIImage(named: "icAddPhoto"), for: UIControlState())
            } else {
                model.imagesIds[sender.tag] = nil
                
                if model.imagesIds.values.isEmpty {
                    for (index, button) in imageButtons.enumerated() {
                        button.isEnabled = index == 0
                    }
                }
                
                sender.setImage(UIImage(named: "icAddPhotoMore"), for: UIControlState())
                
                output.checkInput(input)
            }
            
            sender.contentMode = .center
            sender.isSelected = false
        }
    }

    func setAddress(address: String, with location: Location) {
        addressTextField.text = address
        model.location = location
        output.checkInput(input)
    }
    
    @IBAction func showMapButtonHandler(_ sender: AnyObject)  {
        router.showMap()
    }
    
    override func backButtonHandler(_ sender: AnyObject) {
        if point != nil {
            router.proceedBack()
        } else {
            router.proceedFeed()
        }
        clear()
    }
    
    // MARK: - UITextViewDelegate
    
    func textViewDidChange(_ textView: UITextView) {
        output.checkInput(input)
    }
    
    // MARK: - UIImagePickerControllerDelegate
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingImage image: UIImage, editingInfo: [String : AnyObject]?) {
        output.uploadImage(image)
        selectedSender?.setBackgroundImage(image, for: .reserved)
        selectedSender?.isSelected = true
        dismiss(animated: true, completion: nil)
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }

    // MARK: - Display logic

    func didUploadImage(_ response: Step2.Output) {
        if selectedSender?.tag == ImageButton.logo.rawValue {
            model.logoId = response.imageId
        } else {
            model.imagesIds[(selectedSender?.tag)!] = response.imageId
            if let tag = selectedSender?.tag, tag <= 2 {
                imageButtons[tag].isEnabled = true
            }
        }
        selectedSender?.setBackgroundImage(selectedSender?.backgroundImage(for: .reserved), for: .normal)
        selectedSender?.setImage(UIImage(named: "icDeletePhoto"), for: .normal)
        selectedSender?.setBackgroundImage(nil, for: .reserved)
        
        output.checkInput(input)
    }
    
    func toggleNextButton(_ isEnabled: Bool) {
        nextButton.isEnabled = isEnabled
    }
    
    func showError(_ error: String) {
        selectedSender?.setBackgroundImage(nil, for: .reserved)
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    // MARK: - Private
    
    func clear() {
        model = Step2.ViewModel()
        titleTextField.text = ""
        addressTextField.text = ""
        infoTextView.text = ""
        view.endEditing(true)
        
        imageButtons.enumerated().forEach { (index, button) in
            button.setImage(UIImage(named: "icAddPhotoMore"), for: UIControlState())
            button.setBackgroundImage(nil, for: .normal)
            button.isSelected = false
            button.isEnabled = index == 0
        }
        
        imageButtons.forEach { button in
            button.setImage(UIImage(named: "icAddPhotoMore"), for: UIControlState())
            button.setBackgroundImage(nil, for: .normal)
            button.isSelected = false
        }
        
        pointLogoButton.setImage(UIImage(named: "icAddPhoto"), for: UIControlState())
        pointLogoButton.setBackgroundImage(nil, for: .normal)
        pointLogoButton.isSelected = false
    }
}
