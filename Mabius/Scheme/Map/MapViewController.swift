//
//  MapViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 07/03/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

class MapViewController: BaseViewController, MKMapViewDelegate, FeedCellDelegate, FilterViewControllerDelegate, LocationManagerDelegate, MapPresenterOutput {
    
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var filterButton: UIButton!
    @IBOutlet weak var allowButton: UIButton!
    @IBOutlet weak var locationPlaceholder: UIView!
    @IBOutlet weak var noResultsPlaceholder: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var tableViewHeight: NSLayoutConstraint!
    @IBOutlet weak var filterButtonCheckmark: UIImageView!
    
    var output: MapInteractorInput!
    var router: MapRouter!
    
    fileprivate var model = MapModels.ViewModel()

    fileprivate var input: MapModels.Input {
        return MapModels.Input(region: mapView.region, params: (sideViewController()?.filterController().input)!)
    }

    fileprivate var locationManager: LocationManagerImpl!
    
    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        MapConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 350
        tableView.delegate = self
        
        mapView.showsUserLocation = true
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        locationManager = LocationManagerImpl(delegate: self)
        locationPlaceholder.isHidden = locationManager.isAuthorizedStatusManager()
        if locationManager.isAuthorizedStatusManager() { locationManager.getLocationOneShot() }
        
        setFilterButtonCheckmark()
    }
    
    // MARK: - Event handling

    @IBAction override func openRightMenuButtonHandler(_ sender: UIButton) {
        router.openFilter()
    }
    
    override func backButtonHandler(_ sender: AnyObject) {
        router.openFeed()
    }
    
    @IBAction func tapMapHandler() {
        model.shouldHideAnnotation = true
        animateTableView(alpha: CGFloat(0))
    }
    
    @IBAction func tapNoResultsViewHandler() {
        noResultsPlaceholder.isHidden = true
    }
    
    @IBAction func requestLocationPermission() {
         locationManager.requestAuthorization()
    }
    
    // MARK: FilterViewControllerDelegate
    
    func applyFilters() {
        setFilterButtonCheckmark()
        output.loadPoints(with: input)
    }
    
    // MARK: FeedCellDelegate
    
    func openPoint(_ point: Point) {
        if let id = point.id {
            router.openPoint(id)
        }
    }
    
    func toggleLikeFor(point: Point) {
        if let isLiked = point.isLiked {
            isLiked ? output.removeLike(for: point) : output.like(for: point)
        }
    }
    
    func openLikes(pointId: Int) {
        router.openLikes(pointId: pointId)
    }
    
    func openComments(pointId: Int) {
        router.openComments(pointId: pointId)
    }
    
    // MARK: - LocationManagerDelegate
    
    func locationManager(_ mgr: LocationManager, didUpdate location: Coordinate2D) {
        if model.shouldScrollMapToUserLocation {
            model.shouldScrollMapToUserLocation = false
            mapView.setRegion(MKCoordinateRegionMake(CLLocationCoordinate2DMake(location.latitude, location.longitude), MKCoordinateSpanMake(0.485, 0.584)), animated: true)
        }
    }
    
    func locationManager(_ mgr: LocationManager, didFail reason: LocationManagerError) {}
    
    func locationManagerDidAllowPermission(_ mgr: LocationManager) {
        locationPlaceholder.isHidden = true
        locationManager.getLocationOneShot()
    }
    
    // MARK: - MKMapViewDelegate
    
    fileprivate let reuseId = "point"
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        
        let annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseId) ?? MKAnnotationView(annotation: annotation, reuseIdentifier: reuseId)
        annotationView.annotation = annotation
        
        if annotation.point?.project == "mabius" {
            annotationView.image = UIImage(named: "icPinRed")
        } else if annotation.point?.project != "mabius" && annotation.point?.project != "enactus" {
            let userLocationView = MKPinAnnotationView()
            userLocationView.pinTintColor = UIColor.red
            
            return userLocationView
        }
        
        return annotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        
        guard let element = view.annotation?.point else {
            return
        }
        
        if let lat = element.location?.lat, let lon = element.location?.lon {
            
            var coordinate = CLLocationCoordinate2DMake(lat, lon)
            coordinate.latitude -= mapView.region.span.latitudeDelta / 3
            mapView.setRegion(MKCoordinateRegionMake(coordinate, mapView.region.span), animated: true)
        }

        model.point = element
        animateTableView(alpha: CGFloat(1))
        tableView.reloadData()
        
        model.shouldHideAnnotation = false
    }
    
    func mapView(_ mapView: MKMapView, didDeselect view: MKAnnotationView) {
        model.shouldHideAnnotation = true
        animateTableView(alpha: CGFloat(0))
    }

    func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool) {
        if model.shouldHideAnnotation {
            animateTableView(alpha: CGFloat(0))
        }
        model.shouldHideAnnotation = true
        output.loadPoints(with: input)
    }
    
    // MARK: - Display logic

    func didLoadPoints(_ response: MapModels.Output) {
        guard let clusters = response.clusters else {
            return
        }
        
        //MARK: Think how do it better ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²ðŸš²
        mapView.delegate = nil
        mapView.removeAnnotations(mapView.annotations)
        mapView.delegate = self

        mapView.addAnnotations(getAnnotationsFrom(clusters: clusters))
        noResultsPlaceholder.isHidden = clusters.count > 0
    }

    func didLike(for point: Point) {
        point.isLiked = true
        point.likes = point.likes == nil ? 1 : point.likes! + 1
        
        tableView.reloadData()
    }
    
    func didRemoveLike(for point: Point) {
        point.isLiked = false
        point.likes = point.likes == nil ? 0 : point.likes! - 1
        
        tableView.reloadData()
    }
    
    func showError(_ error: String) {
        noResultsPlaceholder.isHidden = false
        if !mapView.annotations.isEmpty { mapView.removeAnnotations(mapView.annotations) }
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    // MARK: - UITableViewDataSource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAtIndexPath indexPath: IndexPath) -> UITableViewCell {
        
        if let cell: FeedCell = tableView.dequeueReusableCell(withIdentifier: "MapFeedCell") as? FeedCell {
            cell.delegate = self
            cell.point = model.point
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        tableViewHeight.constant = tableView.contentSize.height
    }
    
    // MARK: - Helpers
    
    func getAnnotationsFrom(clusters: [MapCluster]) -> [MKPointAnnotation] {
        var annotations = [MKPointAnnotation]()
        for cluster in clusters {
            let annotation = MKPointAnnotation()
            if let point = cluster.point { annotation.point = point }
            annotation.coordinate = CLLocationCoordinate2D(latitude: cluster.lat, longitude: cluster.lon)
            
            annotations.append(annotation)
        }
        return annotations
    }
    
    func animateTableView(alpha: CGFloat) {
        UIView.animate(withDuration: 0.15) { 
            self.tableView.alpha = alpha
        }
    }
    
    func setFilterButtonCheckmark() {
        filterButtonCheckmark.isHidden = input.params.categories.isEmpty
    }
}
