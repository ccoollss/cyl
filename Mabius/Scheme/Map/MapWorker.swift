//
//  MapWorker.swift
//  Mabius
//
//  Created by Timafei Harhun on 07/03/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

protocol MapWorkerInput {
    
    func loadPoints(with input: MapModels.Input)
    func like(for point: Point)
    func removeLike(for point: Point)
}

protocol MapWorkerOutput: class {
    
    func didLoadPoints(_ response: MapModels.Output)
    func didLike(for point: Point)
    func didRemoveLike(for point: Point)
    func gotError(_ error: Error)
}

class MapWorker: MapWorkerInput {
    
    weak var output: MapWorkerOutput?

    // MARK: - Business Logic

    func loadPoints(with input: MapModels.Input) {
        
        let params = MapParams()
        let filter = FilterSettings()
        
        if !input.params.categories.isEmpty {
            filter.categories = input.params.categories
            params.filter = filter
        }
        
        let region = Region()
        region.centerLat = input.region.center.latitude
        region.centerLon = input.region.center.longitude
        region.deltaLat = input.region.span.latitudeDelta
        region.deltaLon = input.region.span.longitudeDelta
        
        params.region = region
                
        MapPoints(params: params).exec { result in
            switch result {
            case .value(let response):
                if response.array.isEmpty {
                    self.output?.didLoadPoints(MapModels.Output(clusters: [MapCluster](), region: nil))
                } else {
                    self.output?.didLoadPoints(MapModels.Output(clusters: response.object.clusters, region: response.object.region))
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func like(for point: Point) {
        AddLike(pointId: point.id).exec { result in
            switch result {
            case .value(_):
                self.output?.didLike(for: point)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }

    func removeLike(for point: Point) {
        RemoveLike(pointId: point.id).exec { result in
            switch result {
            case .value(_):
                self.output?.didRemoveLike(for: point)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
}
