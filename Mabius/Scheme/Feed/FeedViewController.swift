//
//  FeedViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 3/2/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftyUserDefaults

fileprivate let pointsPerPage = 2

class FeedViewController: BaseViewController, UISearchBarDelegate, FeedCellDelegate, FilterViewControllerDelegate, LocationManagerDelegate, HintsViewControllerDelegate, FeedPresenterOutput {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var filterButton: UIButton!
    @IBOutlet weak var emptyFeedPlaceholder: UIView!
    @IBOutlet weak var filterButtonCheckmark: UIImageView!
    @IBOutlet weak var moderationView: UIView!
    @IBOutlet weak var moderationTitle: FeedTitleLabel!
    @IBOutlet weak var moderationImageView: UIImageView!
    
    fileprivate lazy var refreshControl = UIRefreshControl()
   
    var point: Point?
    
    var output: FeedInteractorInput!
    var router: FeedRouter!

    fileprivate var model = Feed.ViewModel()
    fileprivate var batch = Feed.Batch()
    
    fileprivate var input: Feed.Input {
        return Feed.Input(page: batch.page + 1, perPage: pointsPerPage, search: searchBar.text, params: (sideViewController()?.filterController().input)!, currentLocation: model.currentLocation)
    }
    
    fileprivate var locationManager: LocationManagerImpl!
    
    fileprivate var applyFilterAfterLocationPermission = false
    
    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        FeedConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        installUI()
        output.loadCategories()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        setFilterButtonCheckmark()
        showModerationIfNeeded()
        fixSearchBar()
        
        locationManager = LocationManagerImpl(delegate: self)
        
        if locationManager.isAuthorizedStatusManager() {
            locationManager.getLocationOneShot()
        }
    }
    
    fileprivate func showHintsIfNeeded() {
        if !Defaults[.hintsShown] {
            let vc = router.showHint()
            
            let cell = tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as? FeedCell
            let y = cell != nil ? (cell?.convert((cell?.commentsButton.frame)!, to: view).minY)! + 22 : 0
            vc.setupFirstHint(y)
            vc.delegate = self
        }
    }
    
    func hideHints() {
        router.hideHint()
        Defaults[.hintsShown] = true
    }
    
   fileprivate  func showModerationIfNeeded() {
        if Defaults[.showModeration] {
            moderationTitle.text = point?.title
            if let img = point?.images?[0] { ImageFetcher.fetch(img, to: moderationImageView) }
            moderationView.isHidden = false
            Defaults[.showModeration] = false
        }
    }
    
    fileprivate func fixSearchBar() {
        if tableView.contentOffset.y < searchBar.frame.height && emptyFeedPlaceholder.isHidden {
            tableView.contentOffset = CGPoint(x: 0, y: searchBar.frame.height)
        }
    }
    
    @objc fileprivate func handleRefresh(refreshControl: UIRefreshControl) {
        batch.page = 0
        model.loading = true
        output.loadPoints(with: input)
    }
    
    // MARK: - LocationManagerDelegate
    
    func locationManager(_ mgr: LocationManager, didUpdate location: Coordinate2D) {
        model.currentLocation = Location()
        model.currentLocation?.lat = location.latitude
        model.currentLocation?.lon = location.longitude
        
        if applyFilterAfterLocationPermission {
            applyFilters()
            applyFilterAfterLocationPermission = false
        }
    }
    
    func locationManager(_ mgr: LocationManager, didFail reason: LocationManagerError) {}
    
    func locationManagerDidAllowPermission(_ mgr: LocationManager) {
        locationManager.getLocationOneShot()
    }
    
    // MARK: - Event handling
    
    @IBAction override func openRightMenuButtonHandler(_ sender: UIButton) {
        router.openFilter()
    }
    
    @IBAction func moderationButtonHandler(_ sender: AnyObject) {
        moderationView.isHidden = true
        Defaults[.showModeration] = false
    }
    
    // MARK: FeedCellDelegate
    
    func openPoint(_ point: Point) {
        if let id = point.id {
            router.openPoint(id)
        }
    }
    
    func toggleLikeFor(point: Point) {
        if let isLiked = point.isLiked {
            isLiked ? output.removeLike(for: point) : output.like(for: point)
        }
    }
    
    func openLikes(pointId: Int) {
        router.openLikes(pointId: pointId)
    }
    
    func openComments(pointId: Int) {
        router.openComments(pointId: pointId)
    }
    
    // MARK: - UISearchBarDelegate
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchBar.setShowsCancelButton(true, animated: true)
    }
    
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        searchBar.setShowsCancelButton(false, animated: true)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ""
        if searchBar.isFirstResponder { searchBar.resignFirstResponder() }
        resetParams()
        model.loading = true
        output.loadPoints(with: input)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        resetParams()
        model.loading = true
        output.loadDebouncedPoints(with: input)
    }
    
    // MARK: - Display logic
    
    fileprivate func installUI() {
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 350
        tableView.delegate = self
        addRefreshControl()
    }
    
    fileprivate func addRefreshControl() {
        refreshControl.addTarget(self, action: #selector(handleRefresh(refreshControl:)), for: .valueChanged)
        tableView.addSubview(refreshControl)
    }
    
    func didLoadCategories() {
        model.loading = true
        output.loadPoints(with: input)
    }

    func didLoadPoints(_ response: Feed.Output) {
        model.points = []
        model.loading = false
        model.points = response.points

        batch.page = response.page
        batch.total = response.total

        tableView.reloadData()
        
        if refreshControl.isRefreshing {
            refreshControl.endRefreshing()
        }
        
        emptyFeedPlaceholder.isHidden = model.points.count > 0
        
        showHintsIfNeeded()
    }
    
    func didLoadMorePoints(_ response: Feed.Output) {
        model.loading = false
        model.points.append(contentsOf: response.points)
        
        batch.page = response.page
        batch.total = response.total
        
        tableView.reloadData()
    }
    
    func didLike(for point: Point) {
        point.isLiked = true
        point.likes = point.likes == nil ? 1 : point.likes! + 1
        
        tableView.reloadData()
    }

    func didRemoveLike(for point: Point) {
        point.isLiked = false
        point.likes = point.likes == nil ? 0 : point.likes! - 1
        
        tableView.reloadData()
    }
    
    func showError(_ error: String) {
        model.points = []
        tableView.reloadData()
        
        if refreshControl.isRefreshing {
            refreshControl.endRefreshing()
            fixSearchBar()
        }
        
        if searchBar.isFirstResponder { searchBar.resignFirstResponder() }
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleView(_ isEnabled: Bool) {
        sideViewController()?.filterController().toggleView(isEnabled)
        if !(searchBar.isFirstResponder || !isEnabled) { view.isUserInteractionEnabled = isEnabled }
    }

    // MARK: - UITableViewDataSource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return model.points.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAtIndexPath indexPath: IndexPath) -> UITableViewCell {
        
        if let cell: FeedCell = tableView.dequeueReusableCell(withIdentifier: "FeedCell") as? FeedCell {
            cell.delegate = self
            cell.point = model.points[indexPath.row]
            return cell
        }
        
        return UITableViewCell()
    }
    
    // MARK: UIScrollViewDelegate
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        
        if (!model.loading && model.points.count < batch.total) {
            let offset = scrollView.contentOffset.y;
            let bounds = scrollView.bounds;
            let size = scrollView.contentSize;
            let inset = scrollView.contentInset;
            let y = offset + bounds.size.height - inset.bottom;
            let h = size.height;
            
            let reloadDistance = 200;
            let position = y + CGFloat(reloadDistance)
        
            if position > h {
                model.loading = true
                output.loadPoints(with: input)
            }
        }
    }

    // MARK: - Helpers
    
    fileprivate func setFilterButtonCheckmark() {
        filterButtonCheckmark.isHidden = input.params.sort == SortType.new.rawValue && input.params.categories.isEmpty
    }
    
    fileprivate func resetParams() {
        batch.page = 0
    }
    
    // MARK: - FilterViewControllerDelegate
    
    func applyFilters() {
        
        if !locationManager.isAuthorizedStatusManager() && (sideViewController()?.filterController().input)?.sort == "distance" {
            locationManager.requestAuthorization()
            applyFilterAfterLocationPermission = true
        } else {
            resetParams()
            setFilterButtonCheckmark()
            model.loading = true
            output.loadPoints(with: input)
        }
    }
}
