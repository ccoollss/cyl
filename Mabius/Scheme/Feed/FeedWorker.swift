//
//  FeedWorker.swift
//  Mabius
//
//  Created by Timafei Harhun on 3/2/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

protocol FeedWorkerInput {
    
    func loadCategories()
    func loadPoints(with input: Feed.Input)
    func like(for point: Point)
    func removeLike(for point: Point)
}

protocol FeedWorkerOutput: class {
    
    func didLoadCategories()
    func didLoadPoints(_ response: Feed.Output)
    func didLoadMorePoints(_ response: Feed.Output)
    func didLike(for point: Point)
    func didRemoveLike(for point: Point)
    func gotError(_ error: Error)
}

class FeedWorker: FeedWorkerInput {
    
    weak var output: FeedWorkerOutput?

    // MARK: - Business Logic

    func loadPoints(with input: Feed.Input) {
        
        let listParams = ListParams()
        let filter = FilterSettings()
        
        if !input.params.categories.isEmpty {
            filter.categories = input.params.categories
            listParams.filter = filter
        }
        
        if let search = input.search, search.characters.count > 0 {
            listParams.search = input.search
        }
        
        listParams.sort = input.params.sort
        
        if input.params.sort == "distance" { listParams.location = input.currentLocation }
        
        PointsFeed(page: input.page, perPage: input.perPage, params: listParams).exec { result in
            switch result {
            case .value(let response):
                response.object.points.forEach({ point in PointsDataStorage.save(point: point) })
                
                if response.object.pagination.currentPage == 1 {
                    self.output?.didLoadPoints(Feed.Output(page: response.object.pagination.currentPage,
                                                          total: response.object.pagination.total,
                                                          points: response.object.points))

                } else {
                    self.output?.didLoadMorePoints(Feed.Output(page: response.object.pagination.currentPage,
                                                              total: response.object.pagination.total,
                                                              points: response.object.points))
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func loadCategories() {
        CategoriesProvider.instance.load { success in
            if success {
                self.output?.didLoadCategories()
            } else {
                self.output?.gotError(NetworkError.badResponse)
            }
        }
        
    }
    
    func like(for point: Point) {
        AddLike(pointId: point.id).exec { result in
            switch result {
            case .value(_):
                self.output?.didLike(for: point)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func removeLike(for point: Point) {
        RemoveLike(pointId: point.id).exec { result in
            switch result {
            case .value(_):
                self.output?.didRemoveLike(for: point)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
}
