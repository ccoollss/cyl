//
//  FilterWorker.swift
//  Mabius
//
//  Created by Work on 3/3/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

protocol FilterWorkerInput {
    func loadData()
}

protocol FilterWorkerOutput: class {
    func didLoad(data: Filter.Output)
    func gotError(_ error: Error)
}

class FilterWorker {
    
    weak var output: FilterWorkerOutput!

    // MARK: - Business Logic

    func loadData() {
        let group = DispatchGroup()
        
        var projects = [Project]()
        var categories = [Category]()
        var subcategories = [SubCategory]()
        
        group.enter()
        _ = GetProjects().exec().subscribe(onNext: { response in
            projects = response.array
            group.leave()
        }, onError: { error in
            self.output.gotError(error)
            group.leave()
        })
        
        group.enter()
        _ = GetCategories().exec().subscribe(onNext: { response in
            categories = response.array
            
            for category in categories {
                group.enter()
                _ = GetSubCategories(categoryId: category.id).exec().subscribe(onNext: { response in
                    subcategories.append(contentsOf: response.array)
                    group.leave()
                }, onError: { error in
                    self.output.gotError(error)
                    group.leave()
                })
            }
            group.leave()
        }, onError: { error in
            self.output.gotError(error)
            group.leave()
        })
        
        group.notify(queue: .main) { 
            self.output.didLoad(data:Filter.Output(projects: projects, categories: categories, subcategories: subcategories))
        }
    }
}
