//
//  FilterViewController.swift
//  Mabius
//
//  Created by Work on 3/3/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import TagListView

protocol FilterViewControllerDelegate: NSObjectProtocol {
    func applyFilters()
}

class FilterViewController: BaseViewController, TagListViewDelegate, FilterPresenterOutput {
    
    @IBOutlet weak var projectTagView: FilterTagListView!
    @IBOutlet weak var categoryTagView: FilterTagListView!
    @IBOutlet weak var subcategoryTagView: FilterTagListView!
    @IBOutlet weak var resetButton: UIButton!
    @IBOutlet weak var sortButton: RoundedButton!
    @IBOutlet weak var sortControls: UIView!
    @IBOutlet weak var projectTopMargin: NSLayoutConstraint!
    @IBOutlet weak var subcategoryBottomMargin: NSLayoutConstraint!
    
    weak var delegate: FilterViewControllerDelegate?
    
    var output: FilterInteractorInput!
    
    var type = FilterType.feed {
        didSet {
            sortControls.isHidden = type == .map
            projectTopMargin.constant = type == .map ? 0 : 105
            subcategoryBottomMargin.constant = type == .map ? 283 + 105 : 283
            view.layoutIfNeeded()
        }
    }
    
    fileprivate var model = Filter.ViewModel.init()
    
    var input: Filter.Input! {
        return Filter.Input(sort: getSortOption(), categories: getSelectedCategories(), projects: getSelectedProjects(), subcategories: getSelectedSubcategories()) 
    }
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        FilterConfigurator.instance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        projectTagView.delegate = self
        categoryTagView.delegate = self
        subcategoryTagView.delegate = self
        
        output.loadData()
    }
    
    // MARK: - Event handling
    
    @IBAction func sortButtonHandler(_ sender: AnyObject) {
        
        let buttons = getButtonsTittles()
        
        self.actionSheet(nil, message: nil, cancel: nil, buttons: buttons) { [unowned self] title in
            self.toggleView(false)
            self.sortButton.setTitle(title, for: .normal)
            self.delegate?.applyFilters()
        }
    }
    
    @IBAction func resetButtonHandler(_ sender: Any) {
        for tag in projectTagView.selectedTags() { tag.isSelected = false }
        for tag in categoryTagView.selectedTags() { tag.isSelected = false }
        for tag in subcategoryTagView.selectedTags() { tag.isSelected = false }
        sortButton.setTitle(SortType.new.localizable(), for: .normal)
        delegate?.applyFilters()
    }
    
    @objc func tagPressed(_ title: String, tagView: TagView, sender: TagListView) -> Void {
        tagView.isSelected = !tagView.isSelected
        toggleView(false)
        delegate?.applyFilters()
    }
    
    // MARK: - Display logic
    
    func didLoad(data: Filter.Output) {
        
        for project in data.projects {
            model.projects[project.title!] = project.id
            projectTagView.addTag(project.title!)
        }
        for category in data.categories {
            model.categories[category.title!] = category.id
            categoryTagView.addTag(category.title!)
        }
        for subcategory in data.subcategories {
            model.subcategories[subcategory.title!] = subcategory.id
            subcategoryTagView.addTag(subcategory.title!)
        }
    }
    
    func didAppliedFilter() {
        toggleView(true)
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    func showError(_ error: String) {
        alert("Ошибка", message: error, cancel: "OK")
    }
    
    //MARK: - Helpers
    
    func getButtonsTittles() -> [String] {
        return getOptions().map { $0.localizable() }
    }
    
    func getOptions() -> [SortType] {
        return [SortType.new, SortType.likes, SortType.distance, SortType.votes]
    }
    
    func getSortOption() -> String {
        return getOptions()[getButtonsTittles().index(of: sortButton.title(for: .normal)!)!].rawValue
    }
    
    func getSelectedProjects() -> [String]? {
        var projectsIds = [String]()
        for tag in projectTagView.selectedTags() {
            projectsIds.append(model.projects[(tag.titleLabel?.text)!]!)
        }
        if projectsIds.count > 0 { return projectsIds }
        return nil
    }
    
    func getSelectedCategories() -> [Int]? {
        var categoriesIds = [Int]()
        for tag in categoryTagView.selectedTags() {
            if let category = model.categories[(tag.titleLabel?.text)!] {
                categoriesIds.append(category)
            }
        }
        if categoriesIds.count > 0 { return categoriesIds }
        return nil
    }
    
    func getSelectedSubcategories() -> [Int]? {
        var subategoriesIds = [Int]()
        for tag in subcategoryTagView.selectedTags() {
            if let subcategory = model.subcategories[(tag.titleLabel?.text)!] {
                subategoriesIds.append(subcategory)
            }
        }
        if subategoriesIds.count > 0 { return subategoriesIds }
        return nil
    }
}
