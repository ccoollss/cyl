//
//  PlaceViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 2/27/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

class PlaceViewController: BaseViewController, MKMapViewDelegate, LocationManagerDelegate, PlacePresenterOutput {
    
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var contentBottom: NSLayoutConstraint!
    @IBOutlet weak var countryTextField: UITextField!
    @IBOutlet weak var cityTextField: UITextField!
    @IBOutlet weak var addressTextField: UITextField!
    @IBOutlet weak var infoTextField: UITextField!
    @IBOutlet weak var doneButton: UIButton!
    
    var didSetAddress:(( _ fullAddress: String, _ country: String?, _ city: String?, _ address: String?, _ more: String?, _ location: Location) -> (Void))?
    
    var output: PlaceInteractorInput!
    var router: PlaceRouter!
    
    var model: Place.Output?
    
    var address: Place.ViewModel?
    fileprivate var locationManager:LocationManagerImpl!
    var input: Place.Input {
        return Place.Input(selectedCountry: countryTextField.text, selectedCity: cityTextField.text, address: addressTextField.text)
    }

    // MARK: - Object lifecycle

    func locationManager(_ mgr: LocationManager, didUpdate location: Coordinate2D) {
        mapView.setRegion(MKCoordinateRegionMake(CLLocationCoordinate2DMake(location.latitude, location.longitude), MKCoordinateSpanMake(0.485, 0.584)), animated: true)
        updateAddresByCoordinate(location: CLLocation.init(latitude: location.latitude, longitude: location.longitude))
    }
    
  
    @IBAction func didTapOnMap(_ sender: UITapGestureRecognizer) {
        let location = sender.location(in: self.mapView)
        let coordinate = self.mapView.convert(location, toCoordinateFrom: self.mapView)
        let coord = CLLocation.init(latitude: coordinate.latitude, longitude: coordinate.longitude)
        updateAddresByCoordinate(location: coord)
    }
    
    private func updateAddresByCoordinate(location:CLLocation) {
        locationManager.getCountryAndCityByCoord(location: location, completion: { (addres) in
                    guard let adres = addres else { return }
                    DispatchQueue.main.async {
                        self.countryTextField.text = adres["Country"] as? String ?? ""
                        self.cityTextField.text = adres["City"] as? String ?? ""
                        self.addressTextField.text = adres["Street"] as? String ?? ""
                        if self.output.checkInput(self.input) {
                            self.view.endEditing(true)
                            self.output.loadLocation(with: self.input, on: self.mapView)
                        }
                    }
        })
    }
    
    func locationManager(_ mgr: LocationManager, didFail reason: LocationManagerError) {
        
    }
    
    func locationManagerDidAllowPermission(_ mgr: LocationManager) {
        //locationPlaceholder.isHidden = true
        if address == nil {
            locationManager.getLocationOneShot()
        }
    }
    
    override func awakeFromNib() {
        super.awakeFromNib()
        PlaceConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewWillAppear(_ animated: Bool) {
        locationManager = LocationManagerImpl(delegate: self)
        if address == nil {
            locationManager.requestAuthorization()
            //locationPlaceholder.isHidden = locationManager.isAuthorizedStatusManager()
            if locationManager.isAuthorizedStatusManager() {
                locationManager.getLocationOneShot()
            }
        }
    }
    
    override func viewDidLoad(){
        super.viewDidLoad()
        if address != nil {
            setAddressFields(with: address?.country, city: address?.city, address: address?.address, more: address?.more)
            output.loadLocation(with: input, on: mapView)
        } else {
            countryTextField.text = ""
           // locationManager.getLocationOneShot()

        }
    }

    override func keyboardWillChangeFrame(_ notification: Foundation.Notification) {
        let value = notification.userInfo![UIKeyboardFrameEndUserInfoKey]
        let frame = (value as AnyObject).cgRectValue
        let kbSize = (notification.userInfo![UIKeyboardFrameBeginUserInfoKey] as AnyObject).cgRectValue.size
        let minSize: CGFloat = min(CGFloat(kbSize.width), CGFloat(kbSize.height))
        
        if let y = frame?.origin.y {
            if y < UIScreen.main.bounds.height {
                contentBottom.constant = minSize + 30
            } else {
                contentBottom.constant = 0
            }
        }
        
        UIView.animate(withDuration: 0.4, animations: {
            self.view.layoutIfNeeded()
        })
    }
    
    override var preferredStatusBarStyle : UIStatusBarStyle {
        return .lightContent
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: "pin") ?? MKAnnotationView(annotation: annotation, reuseIdentifier: "pin")
        annotationView.annotation = annotation
        annotationView.image = UIImage(named: "icPinRed")
        
        return annotationView
    }
    
    fileprivate func setAddressFields(with country: String?, city: String?, address: String?, more: String?) {
        countryTextField.text = country
        cityTextField.text = city
        addressTextField.text = address
        infoTextField.text = more
    }
    
    // MARK: - Event handling
    
    @IBAction func cancelButtonHandler(_ sender: AnyObject) {
        countryTextField.text = ""
        cityTextField.text = ""
        addressTextField.text = ""
        infoTextField.text = ""
        router.dismiss()
    }
    
    @IBAction func doneButtonHandler(_ sender: AnyObject) {
        if model == nil && !output.checkInput(input) {
            let alert: UIAlertController = UIAlertController(title: "Errors.error".localize(),
															 message: "Errors.Address".localize(),
															 preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
            present(alert, animated: true, completion: nil)
        } else if model == nil && output.checkInput(input) {
            view.endEditing(true)
            output.loadLocation(with: input, on: mapView)
        } else if model != nil {
            if let loc = model, didSetAddress != nil {
                didSetAddress!(infoTextField.text!.length > 0 ? (loc.address + ", \(infoTextField.text!)") : loc.address, countryTextField.text, cityTextField.text, addressTextField.text,infoTextField.text, loc.location)
            }
            router.dismiss()
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField.isFirstResponder { textField.resignFirstResponder() }
        output.loadLocation(with: input, on: mapView)
    }
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        let currentCharacterCount = textField.text?.characters.count ?? 0
        if (range.length + range.location > currentCharacterCount){
            return false
        }
        let newLength = currentCharacterCount + string.characters.count - range.length
        
        if textField.isEqual(countryTextField) || textField.isEqual(cityTextField) {
            return newLength <= maxCountryLength && string.rangeOfCharacter(from: CharacterSet.symbols) == nil
        } else if textField.isEqual(addressTextField) {
            return newLength <= maxAddressLength && string.rangeOfCharacter(from: CharacterSet.symbols) == nil
        }
        
        return string.rangeOfCharacter(from: CharacterSet.symbols) == nil
    }
    
    // MARK: - Display logic

    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    func didLoadLocation(_ response: Place.Output) {
        view.endEditing(true)
        model = response
        
        if let loc = model, didSetAddress != nil {
            didSetAddress!(infoTextField.text!.length > 0 ? (loc.address + ", \(infoTextField.text!)") : loc.address, countryTextField.text, cityTextField.text, addressTextField.text,infoTextField.text, loc.location)
        }
    }
    
    func showError(_ error: String) {
        view.endEditing(true)
        let alert: UIAlertController = UIAlertController(title: "Errors.error".localize(),
														 message: error, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}
