//
//  RegisterWorker.swift
//  Mabius
//
//  Created by Timafei Harhun on 16.02.17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

protocol RegisterWorkerInput {
    
    func register(with input: Register.Input.Data)
    func checkInvite(_ invite: String?)
    func addSocial(_ type: SocialType)
    func getUser(_ userId: Int)
    func login(with input: Register.Output)
}

protocol RegisterWorkerOutput: class {
    
    func didRegister(with output: Register.Output)
    func didCheckedInvite(_ isValid: Bool)
    func didAddSocial(_ type: SocialType, profile: SocialProfile)
    func didLogin(with: Register.Output)
    func gotError(_ error: Error)
    func gotUser(_ user: User)
}

class RegisterWorker: RegisterWorkerInput {
    
    weak var output: RegisterWorkerOutput?

    // MARK: - Business Logic

    func register(with input: Register.Input.Data) {
        
        let params = CreateUserForm()
        params.email = input.email
        params.password = input.password
        params.name = input.firstName
        params.secondName = input.secondName
        params.sex = input.gender?.rawValue
        //params.invitation = input.invite
        params.invitation = "yes"
        params.socialTokens = input.socialTokens
        
        CreateUser(params: params).exec { result in
            switch result {
            case .value(let response):
                if let token = response.object.token, let user = response.object.user {
                    self.output?.didRegister(with: Register.Output(token: token, user: user, email: input.email, password: input.password))
                } else {
                    self.output?.gotError(NetworkError.badResponse)
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }

    func login(with input: Register.Output) {
        
        let params = AuthParams()
        params.login = input.email
        params.password = input.password
        
        AuthViaEmail(params: params).exec { result in
            switch result {
            case .value(let response):
                if let token = response.object.token, let userId = response.object.userId {
                    self.output?.didLogin(with: Register.Output(token: token, user: userId, email: input.email, password:input.password))
                } else {
                    self.output?.gotError(NetworkError.badResponse)
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func getUser(_ userId: Int) {
        GetUser(userId: userId).exec { result in
            switch result {
            case .value(let response):
                self.output?.gotUser(response.object)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func checkInvite(_ invite: String?) {

        CheckInvite(invite: invite).exec { result in
            switch result {
            case .value(_):
                self.output?.didCheckedInvite(true)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func addSocial(_ type: SocialType) {
        
        type.auth { (profile, error) in
            if let profile = profile {
                self.output?.didAddSocial(type, profile: profile)
            } else if let error = error  {
                self.output?.gotError(error)
            } else {
               self.output?.gotError(NetworkError.badResponse)
            }
        }
    }
}
