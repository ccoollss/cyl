//
//  RegisterViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 16.02.17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class RegisterViewController: BaseViewController, RegisterPresenterOutput {
    
    @IBOutlet weak var emailTextField: TextField!
    @IBOutlet weak var nameTextField: TextField!
    @IBOutlet weak var lastNameTextField: TextField!
    @IBOutlet weak var passTextField: TextField!
    @IBOutlet weak var repeatPassTextField: TextField!
    @IBOutlet weak var genderSelector: GenderContainer!
    
    @IBOutlet weak var fbButton: UIButton!
    @IBOutlet weak var vkButton: UIButton!
    @IBOutlet weak var registerButton: Button!
    @IBOutlet weak var legalLabel: InfoLabel!
    
    var output: RegisterInteractorInput!
    var router: RegisterRouter!
    
    var input: Register.Input.Data {
        return Register.Input.Data(email: emailTextField.text, password: passTextField.text, repeatPassword: repeatPassTextField.text, firstName: nameTextField.text, secondName: lastNameTextField.text, gender: genderSelector.gender, invite: invite, socialTokens: Array(tokens.values))
    }
    
    fileprivate var invite: String?
    fileprivate var tokens = [SocialType : SocialToken]()

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        RegisterConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        invite = "yes"
        emailTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        nameTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        lastNameTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        passTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        repeatPassTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        
        legalLabel.attributedText = legalText

        output.checkInput(input)
    }
    
    // MARK: - Private
    
    fileprivate var legalText: NSAttributedString {
        let str = "register.terms".localize()
        let substring = "register.termsSub".localize()
        let attStr = NSMutableAttributedString(string: str)
        attStr.addAttribute(NSAttributedStringKey.underlineStyle, value: NSUnderlineStyle.styleSingle.rawValue, range: (str as NSString).range(of: substring))
        return attStr
    }

    // MARK: - Event handling
    
    @IBAction func addSocial(_ sender: UIButton) {
//        output.addSocial(sender.tag == 1 ? .facebook : .vkontakte)
        output.addSocial(.facebook)
    }
    
    @IBAction func legalButtonHandler(_ sender: AnyObject) {
        router.showTermsAndConditions()
    }
    
    @objc func inputChanged(_ textField: UITextField) {
        output.checkInput(input)
    }
    
    @IBAction func confirm(_ sender: Button) {
        output.register(with: input)
    }
    // MARK: - Display logic

    func didRegister() {
        router.proceedNext()
    }
    
    func didCheckInvite(_ isValid: Bool) {
        if !isValid {
            router.proceedBack()
        }
    }
    
    func didAddSocial(_ type: SocialType, profile: SocialProfile) {
        let socialToken = SocialToken()
        socialToken.token = profile.token
        socialToken.type = type.rawValue

        tokens[type] = socialToken

        switch type {
        case .facebook:
            fbButton.isSelected = true
            fbButton.setTitle(profile.name, for: .normal)
        default:
            vkButton.isSelected = true
            vkButton.setTitle(profile.name, for: .normal)
        }
    }

    func showError(_ error: String) {
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleButton(_ isEnabled: Bool) {
        registerButton.isEnabled = isEnabled
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    func toggleScreen() {
        router.proceedBack()
    }
    
    override func prepareWithParams(_ params: [String : String]) {
        _ = view // load IB outlets
        
        invite = params["invite"] ?? "none"
        output.checkInvite(invite)
    }
}
