//
//  EditProfileViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 3/01/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class EditProfileViewController: BaseViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, EditProfilePresenterOutput, PushCellOutput, AboutMeCellOutput {
    
    @IBOutlet weak var tableView: UITableView!
    
    var output: EditProfileInteractorInput!
    var router: EditProfileRouter!
    
    let imagePicker = UIImagePickerController()

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        
        EditProfileConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        imagePicker.sourceType = .photoLibrary
        imagePicker.allowsEditing = true
        imagePicker.delegate = self
        
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 44
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if let user = User.fromDefaults { input.email = user.email }
        tableView.reloadData()
    }

    // MARK: - Event handling

    func tableView(_ tableView: UITableView, didSelectRowAtIndexPath indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        switch indexPath.section {
            case 0:
                switch indexPath.row {
                    case 0: // avatar
                        present(imagePicker, animated: true, completion: nil)
                        
                    case 1: break // name
                    case 2: break // last name
                        
                    default: break
                }
            
            case 1:
                if let cell = tableView.cellForRow(at: indexPath) as? AboutMeCell { cell.aboutMeTextView.becomeFirstResponder() }
            
            case 2:
                let newGender = indexPath.row == 1 ? Gender.male : Gender.female
            
                if input.gender != newGender {
                    input.gender = newGender
                    output.edit()
                }
            
            case 3:
                switch indexPath.row {
                    case 1: router.changeMail()
                    case 2: router.changePass()
                    default: break
                }
            
            case 4:
                switch indexPath.row {
//                    case 1: output.addSocial(.vkontakte)
                    case 2: output.addSocial(.facebook)
                    default: break
                }
                
            case 5: break // push
            case 6: output.logout()
                
            default: break
        }
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        
        let isName = textField.tag == 1 ? true : false
        
        if (isName && input.firstName != textField.text) || (!isName && input.lastName != textField.text)  {
            if isName {
                input.firstName = textField.text
            } else {
                input.lastName = textField.text
            }
            output.edit()
        }
    }

    // MARK: - Display logic
    
    func didEdited() {
        tableView.reloadData()
    }
    
    func didPushUpdate(_ subcscribe: Bool) {
        tableView.reloadData()
    }
    
    func didLogout() {
        router.logout()
    }
    
    func showError(_ error: String) {
        tableView.reloadData()
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
    
    //MARK: - UITableView

    func numberOfSectionsInTableView(_ tableView: UITableView) -> Int {
        return 7
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0,2,3,4: return 3
        case 1,5,6: return 1
        default: return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAtIndexPath indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
            case 0:
                switch indexPath.row {
                    case 0:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "avatarCell") as? SettingsCell {
                            ImageFetcher.fetch(input.avatarUrl, to: cell.leftImage, placeholder: #imageLiteral(resourceName: "imgProfile"))
                            cell.leftImage.clipsToBounds = true
                            cell.leftImage.layer.cornerRadius = cell.leftImage.bounds.height / 2
                            return cell
                        }
                    
                    case 1:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "titleCell") as? SettingsCell {
                            cell.textField.text = input.firstName
                            cell.textField.tag = indexPath.row
                            cell.textField.delegate = self
                            return cell
                        }
                    
                    case 2:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "titleCell") as? SettingsCell {
                            cell.textField.text = input.lastName
                            cell.textField.tag = indexPath.row
                            cell.textField.delegate = self
                            return cell
                        }
                    default:
                        break
                }
            
            case 1:
                if let aboutMeCell = tableView.dequeueReusableCell(withIdentifier: "aboutMeCell") as? AboutMeCell {
                    aboutMeCell.output = self
                    aboutMeCell.aboutMeTextView.text = input.about
                    return aboutMeCell
                }
            
            case 2:
                switch indexPath.row {
                    case 0:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "headerCell") as? SettingsCell {
                            cell.title.text = "editProfile.gender".localize()
                            return cell
                        }
                    
                    case 1:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "sexCell") as? SettingsCell {
                            cell.rightImage.isHidden = input.gender == Gender.male ? false : true
                            cell.title.text = "editProfile.male".localize()
                            cell.leftImage.image = UIImage(named: "icMale")
                            return cell
                        }

                    case 2:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "sexCell") as? SettingsCell {
                            cell.rightImage.isHidden = input.gender == Gender.female ? false : true
                            cell.title.text = "editProfile.female".localize()
                            cell.leftImage.image = UIImage(named: "icFemale")
                            return cell
                        }
                    default:
                        break
                }
                
            case 3:
                switch indexPath.row {
                    case 0:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "changeCell") as? SettingsCell {
                            cell.title.text = input.email
                            cell.rightImage.image = nil
                            return cell
                        }

                    case 1:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "changeCell") as? SettingsCell {
                            cell.rightImage.image = UIImage(named: "icDisclosure")
                            cell.title.text = "editProfile.changeEmail".localize()
                            return cell
                        }
                    
                    case 2:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "changeCell") as? SettingsCell {
                            cell.rightImage.image = UIImage(named: "icDisclosure")
                            cell.title.text = "editProfile.changePassword".localize()
                            return cell
                        }
                    default:
                        break
                }
                
            case 4:
                switch indexPath.row {
                    case 0:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "headerCell") as? SettingsCell {
                            cell.title.text = "editProfile.addSocial".localize()
                            return cell
                        }

//                    case 1:
//                        if let cell = tableView.dequeueReusableCell(withIdentifier: "socialCell") as? SettingsCell {
//                            let isAuthVK = (input.tokens[SocialType.vkontakte] != nil) ? true : false
//                            
//                            if isAuthVK {
//                                cell.title.text = input.tokens[SocialType.vkontakte]?.name
//                                cell.title.textColor = UIColor.cylPaleTealColor()
//                                cell.leftImage.image = UIImage(named: "icVkActive")
//                            } else {
//                                cell.title.text = "editProfile.addVK".localize()
//                                cell.title.textColor = UIColor.black
//                                cell.leftImage.image = UIImage(named: "icVk")
//                            }
//                            return cell
//                        }
                        
                    case 2:
                        if let cell = tableView.dequeueReusableCell(withIdentifier: "socialCell") as? SettingsCell {
                            let isAuthFB = (input.tokens[SocialType.facebook] != nil) ? true : false
                            
                            if isAuthFB {
                                cell.title.text = input.tokens[SocialType.facebook]?.name
                                cell.title.textColor = UIColor.cylPaleTealColor()
                                cell.leftImage.image = UIImage(named: "icFbActive")
                            } else {
                                cell.title.text = "editProfile.addFB".localize()
                                cell.title.textColor = UIColor.black
                                cell.leftImage.image = UIImage(named: "icFb")
                            }
                            return cell
                        }
                default:
                    break
                }
                
            case 5:
                if let pushCell = tableView.dequeueReusableCell(withIdentifier: "pushCell") as? PushCell {
                    pushCell.swtch.setOn(input.togglePushes, animated: false)
                    pushCell.output = self
                    return pushCell
                }
            
            case 6:
                if let cell = tableView.dequeueReusableCell(withIdentifier: "exitCell") as? SettingsCell {
                    return cell
                }
            
            default:
                break
        }
        
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, willDisplayCell cell: UITableViewCell, forRowAtIndexPath indexPath: IndexPath) {
        cell.separatorInset = UIEdgeInsets.zero
        cell.layoutMargins = UIEdgeInsets.zero
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        switch section {
        case 0,1,3,5,6: return 17
        default: return 0
        }
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: self.tableView(tableView, heightForHeaderInSection: section)))
        view.backgroundColor = UIColor.cylPaleGreyColor()
        if section == 0 {
            view.backgroundColor = UIColor.clear
        }
        return view
    }
    
    // MARK: - PushCellOutput
    
    func switchValueChanged(newValue: Bool) {
        output.pushUpdate(newValue)
    }

    // MARK: - AboutMeCellOutput
    
    func textViewDidEndEditing(_ text: String) {
        if text != input.about {
            input.about = text
            output.edit()
        }
    }
    
    // MARK: - UIImagePickerControllerDelegate
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingImage image: UIImage, editingInfo: [String : AnyObject]?) {
        output.uploadImage(image)
        dismiss(animated: true, completion: nil)
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }

    // MARK: - Private 

    var input: EditProfile.Input {
        get { return output.input }
        set { output.input = newValue }
    }
}
