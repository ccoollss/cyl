//
//  EditProfileWorker.swift
//  Mabius
//
//  Created by Timafei Harhun on 3/01/17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import SwiftyUserDefaults

protocol EditProfileWorkerInput {
    
    func edit(with input: EditProfile.Input)
    func uploadImage(_ image: UIImage)
    func getUser(by id: Int)
    
    func addSocial(_ type: SocialType)
    func pushUpdate(_ subcscribe: Bool)
    func pushUnsubscribe()
}

protocol EditProfileWorkerOutput: class {
    
    func didEdited(with output: EditProfile.Output)
    
    func didUploadImage(_ id: Int)
    func didGetUser(_ user: User)
    
    func didAddSocial(_ type: SocialType, profile: SocialProfile)
    func didPushUpdate(_ subcscribe: Bool)
    func didPushUnsubscribed()
    func didLogout()
    
    func gotError(_ error: Error)
}

class EditProfileWorker: EditProfileWorkerInput {
    
    weak var output: EditProfileWorkerOutput?

    // MARK: - Business Logic

    func edit(with input: EditProfile.Input) {
        
        let body = EditUserParams()
        body.name = input.firstName
        body.secondName = input.lastName
        body.sex = input.gender?.rawValue
        body.avatarId = input.avatarId
        body.about = input.about

        var tokens = [SocialToken]()
        
        for (key, value) in input.tokens {
            if value.token.length > 0 {
                let socialToken = SocialToken()
                socialToken.token = value.token
                socialToken.type = key.rawValue                
                tokens.append(socialToken)
            }
        }
        body.socialTokens = tokens
        
        EditUser(userId: input.userId, params: body).exec { result in
            switch result {
            case .value(_):
                self.output?.didEdited(with: EditProfile.Output())
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func addSocial(_ type: SocialType) {
        type.auth { (profile, error) in
            if let profile = profile {
                self.output?.didAddSocial(type, profile: profile)
            } else if let error = error  {
                self.output?.gotError(error)
            } else {
                self.output?.gotError(NetworkError.badResponse)
            }
        }
    }
    
    func uploadImage(_ image: UIImage) {
        UploadImage(image: image).exec { result in
            switch result {
            case .value(let response):
                self.output?.didUploadImage(response.object.id)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func pushUpdate(_ subcscribe: Bool) {
        let events = subcscribe ? "like, comment, reply, publish" : ""
        
        PushUpdate(events: events).exec { result in
            switch result {
            case .value(_):
                self.output?.didPushUpdate(subcscribe)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func pushUnsubscribe() {
        PushUnsubscribe().exec { result in
            switch result {
            case .value(_):
                self.output?.didPushUnsubscribed()
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func logout() {
        Logout().exec { result in
            switch result {
            case .value(_):
                self.output?.didLogout()
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func getUser(by id: Int) {
        GetUser(userId: id).exec { result in
            switch result {
            case .value(let response):
                self.output?.didGetUser(response.object)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
}
