//
//  LoginWorker.swift
//  Mabius
//
//  Created by Andrey Toropchin on 14.02.17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

protocol LoginWorkerInput
{
    func login(with input: Login.Input.ViaEmail)
    func getUser(_ userId: Int)
    func loginSocial(with input: Login.Input.ViaSocial)
}

protocol LoginWorkerOutput: class
{
    func didLogin(with output: Login.Output)
    func gotUser(_ user: User)
    func gotError(_ error: Error)
}

class LoginWorker: LoginWorkerInput
{
    weak var output: LoginWorkerOutput?

    // MARK: - Business Logic

    func login(with input: Login.Input.ViaEmail) {
        
        let params = AuthParams()
        params.login = input.login
        params.password = input.password

        AuthViaEmail(params: params).exec { result in
            switch result {
            case .value(let response):
                if let token = response.object.token, let userId = response.object.userId {
                    self.output?.didLogin(with: Login.Output(token: token, userId: userId, email: input.login))
                } else {
                    self.output?.gotError(NetworkError.badResponse)
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }

    func loginSocial(with input: Login.Input.ViaSocial) {
        
        let params = SocialToken()
        params.token = input.token
        params.type = input.type

        AuthViaSocial(token: params).exec { result in
            switch result {
            case .value(let response):
                if let token = response.object.token, let userId = response.object.userId {
                    self.output?.didLogin(with: Login.Output(token: token, userId: userId, email: nil))
                } else {
                    self.output?.gotError(NetworkError.badResponse)
                }
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
    
    func getUser(_ userId: Int) {
        GetUser(userId: userId).exec { result in
            switch result {
            case .value(let response):
                self.output?.gotUser(response.object)
            case .error(let error):
                self.output?.gotError(error)
            }
        }
    }
}
