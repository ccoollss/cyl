//
//  InviteViewController.swift
//  Mabius
//
//  Created by Timafei Harhun on 15.02.17.
//  Copyright (c) 2017 vice3.agency. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

class InviteViewController: BaseViewController, InvitePresenterOutput
{
    @IBOutlet weak var textView: TextView!
    @IBOutlet weak var emailTextField: TextField!
    @IBOutlet weak var applyButton: Button!
    
    @IBOutlet weak var userAgreementLabel: UILabel!
    @IBOutlet weak var applicationAgreementLabel: UILabel!
    
    @IBOutlet weak var userAgreementButton: UIButton!
    @IBOutlet weak var applicationAgreementButton: UIButton!
    
    var output: InviteInteractorInput!
    var router: InviteRouter!
    
    var input: Invite.Input.Data {
        return Invite.Input.Data(email: emailTextField.text, note: textView.text)
    }

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        InviteConfigurator.instance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
		applicationAgreementButton.setImage(#imageLiteral(resourceName: "icTermsAgree"), for: UIControlState())
        textView.placeholder = "UI.tellAboutYou".localize()

        emailTextField.addTarget(self, action: #selector(inputChanged(_:)), for: .editingChanged)
        output.checkInput(input)
		
		let str = "invite.agreeTerms".localize()
		let substring = "invite.agreeTermsSub".localize()
		
		let attStr = NSMutableAttributedString(string: str)
        attStr.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.cylMainColor(), range: (str as NSString).range(of: substring))
		
		let appStr = "invite.appTerms".localize()
		let appSubstring = "invite.appTermsSub".localize()
		
		let appAttStr = NSMutableAttributedString(string: appStr)
        appAttStr.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.cylMainColor(), range: (appStr as NSString).range(of: appSubstring))
		
        userAgreementLabel.attributedText = attStr
        applicationAgreementLabel.attributedText = appAttStr
        
        let termsLabelTapGR = UITapGestureRecognizer(target: self, action: #selector(viewTermsTapHandler))
        termsLabelTapGR.numberOfTapsRequired = 1
        userAgreementLabel.addGestureRecognizer(termsLabelTapGR)
        
        let applicationLabelTapGR = UITapGestureRecognizer(target: self, action: #selector(viewApplicationTerms))
        termsLabelTapGR.numberOfTapsRequired = 1
        applicationAgreementLabel.addGestureRecognizer(applicationLabelTapGR)
    }

    // MARK: - Event handling
    
    @IBAction func confirm() {
        output.invite(with: input)
    }
    
    @objc func inputChanged(_ textField: UITextField) {
        output.checkInput(input)
    }
  
    @IBAction func agreeTerms(_ sender: UIButton) {
        if sender.image(for: UIControlState()) == #imageLiteral(resourceName: "icCircle") {
            sender.setImage(#imageLiteral(resourceName: "icTermsAgree"), for: UIControlState())
        } else {
            sender.setImage(#imageLiteral(resourceName: "icCircle"), for: UIControlState())
        }
        output.checkInput(input)
    }
    
    @objc func viewTermsTapHandler() {
        router.openTerms()
    }
    
    @objc func viewApplicationTerms() {
        router.openAgreement()
    }
    
    // MARK: - Display logic
    
    func didInvited() {
        router.proceedSuccess()
    }
    
    func showError(_ error: String) {
        alert("Errors.error".localize(), message: error, cancel: "OK")
    }

    func toggleButton(_ isEnabled: Bool) {
        applyButton.isEnabled = isEnabled && userAgreementButton.image(for: UIControlState()) == #imageLiteral(resourceName: "icTermsAgree") && applicationAgreementButton.image(for: UIControlState()) == #imageLiteral(resourceName: "icTermsAgree")
    }
    
    func toggleView(_ isEnabled: Bool) {
        view.isUserInteractionEnabled = isEnabled
    }
}

extension InviteViewController : UITextViewDelegate {
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if text == "\n" {
            textView.resignFirstResponder()
            return false
        }
        return true
    }
    
    func textViewDidChange(_ textView: UITextView) {
        output.checkInput(input)
    }
}
